(require (lib "graphics.ss" "graphics"))
(load "global.ss")
(load "cardset.ss")
(load "card.ss")

(define (SimpleGUICardDrawer vp)
  (define mydraw-pixmap (draw-pixmap vp))
  (define (DrawCard card x y)
    (define (GetCardString)
          (string-append "card-"
                         (number->string (- (card 'Value) 1))
                         (case (card 'Color)
                           ('klaveren "-0")
                           ('ruiten "-1")
                           ('harten "-2")
                           ('schoppen "-3"))
                         ".png"))
    
    (define (GetPath)
      (call-with-values (λ ()
                          (call-with-values (λ ()
                                              (values (find-system-path 'exec-file))) split-path))
                        (λ (base name must-be-dir?)
                          (let ((collectspath (find-system-path 'collects-dir)))
                            (if (relative-path? collectspath)
                                (path->string (simplify-path (build-path base collectspath "games" "cards" "hicolor" (GetCardString))))
                                (path->string (simplify-path (build-path collectspath "games" "cards" "hicolor" (GetCardString)))))))))
    
    (if (and (procedure? card)
             (card 'Implements? 'Card))
        (mydraw-pixmap (GetPath) (make-posn x y))
        (error 'SimpleGUICardDrawer.DrawCard "expects type <Card> as 1st argument, given: ~S" card)))
  
  (define (DrawCardSet set x y evolvedirection)
    (if (and (procedure? set)
             (set 'Implements? 'CardSet))
        (let ((lst (set 'toPosList)))
          (define (DrawNextCard pos x y)
            (DrawCard (lst 'value pos) x y)
            (if (lst 'has-next? pos)
                (if (eq? evolvedirection 'horizontal)
                    (DrawNextCard (lst 'next pos) (+ x 14) y)
                    (DrawNextCard (lst 'next pos) x (+ y 20)))))
          (if (not (lst 'empty?))
              (DrawNextCard (lst 'first-position) x y)))
        (error 'SimpleGUICardDrawer.DrawCardSet "expects type <CardSet> as 1st argument, given: ~S" card)))
  
  (λ msg
    (if (null? msg)
        (error 'SimpleGUICardDrawer "object requires a message")
        (case (car msg)
          ('DrawCard (DrawCard (GetParam msg 0) (GetParam msg 1) (GetParam msg 2)))
          ('DrawCardSet (DrawCardSet (GetParam msg 0) (GetParam msg 1) (GetParam msg 2) (GetParam msg 3)))
          (else (error 'Player "message not understood: ~S" (car msg)))))))

;DEBUG
(open-graphics)
(define b (open-viewport "Port" 800 600))
(define a (SimpleGUICardDrawer b))
(define c (CardSet))
(c 'add! (Card 'harten 5 (λ (x y) 0)))
(c 'add! (Card 'klaveren 2 (λ (x y) 0)))
(c 'add! (Card 'ruiten 7 (λ (x y) 0)))
(a 'DrawCardSet c 0 0 'horizontal)