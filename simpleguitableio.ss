(load "simpleguicarddrawer.ss")

(define (SimpleGUITableIO vp table bb-x bb-y bb-w bb-h)
  (define positions (position-list (位 (x y)
                                     (and (= (posn-x x) (posn-x y))
                                          (= (posn-y x) (posn-y y))))))
  (define maxVSetHeight 300)
  (define maxHSetWidth 350)
  (define cardWidth 71)
  (define cardHeight 96)
  (define stackWidth 79)
  
  (define cd (SimpleGUICardDrawer vp))
  
  (define (Recalculate)
    (let ((poslst (table 'toPosList)))
      (define (NextPos pos x y)
        (define cardWidth (if (ObjectOfType? 'CardStack (poslst 'value pos))
                              stackWidth
                              cardWidth))
        (set! x (+ x cardWidth))
        (if (> x (- bb-w cardWidth))
            (begin
              (set! x 0)
              (set! y (+ y maxVSetHeight))))
        (values x y))
      
      (define (iter pos x y)
        (positions 'add-after! (make-posn (+ x bb-x) (+ y bb-y)))
        (if (poslst 'has-next? pos)
            (call-with-values (位 () (NextPos pos x y))
                              (位 (newx newy) (iter (poslst 'next pos) newx newy)))))
      (if (not (poslst 'empty?))
          (iter (poslst 'first-position) 0 0))))
  
  (define (poscmp? func p1 p2)
    (and (func (posn-x p1) (posn-x p2))
         (func (posn-y p1) (posn-y p2))))
  (define (poscmpv? func p1 p2)
    (func (posn-y p1) (posn-y p2)))
  (define (poscmph? func p1 p2)
    (func (posn-y p1) (posn-y p2)))
  (define (find-container c-posn pos tbpos)
    (define (find-x pos tbpos)
      (if (poscmph? >= c-posn (pos 'value)) 
          (if (poscmph? >= c-posn (make-posn (posn-x (pos 'value)) (+ (posn-y (pos'value)) cardHeight)))
              (if (pos 'has-next?)
                  (find-x (pos 'next) (tbpos 'next))
                  #f)
              (list tbpos pos))
          #f))
    (if (poscmpv? >= c-posn (pos 'value)) 
        (if (poscmpv? >= c-posn (make-posn (posn-x (pos 'value)) (+ (posn-y (pos'value)) cardHeight))) 
            (if (pos 'has-next?)
                (find-container (pos 'next) (tbpos 'next))
                #f)
            (find-x pos tbpos))
        #f))
    
  (define (GetClickWait)
    (let* ((poslst (table 'toPosList))
           (c-posn (get-mouse-click vp))
           (cont (find-container c-posn positions poslst)))
      (cd 'FindCardOffset ((car cont) 'value) c-posn ((cdr cont) 'value) maxVSetHeight 'vertical)))
  
  (define (Draw)
    (let ((poslst (table 'toPosList)))
      (define (iter pos pospos)
        (if (ObjectOfType? 'CardStack (poslst 'value pos))
            (cd 'DrawCardStack 
                (poslst 'value pos) 
                (posn-x (positions 'value pospos))
                (posn-y (positions 'value pospos)))
            (cd 'DrawCardSet
                (poslst 'value pos) 
                (posn-x (positions 'value pospos))
                (posn-y (positions 'value pospos))
                maxVSetHeight
                'vertical))
        (if (poslst 'has-next? pos)
            (iter (poslst 'next pos) (positions 'next pospos))))
      (if (not (poslst 'empty?))
          (if (= (poslst 'length) (positions 'length))
              (iter (poslst 'first-position) (positions 'first-position))
              (error 'SimpleGUITableIO.Draw "positions do not appear to have been refreshed")))))
  
  (位 msg
    (if (null? msg)
        (error 'SimpleGUITableIO "object requires a message")
        (case (car msg)
          ('Recalculate (Recalculate))
          ('Draw (Draw))
          ('GetClickWait (GetClickWait))
          ('Implements? (Implements? (GetParam msg 0)))
          (else (error 'SimpleGUITableIO "message not understood: ~S" (car msg)))))))