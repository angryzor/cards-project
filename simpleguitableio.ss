(load "origincardpair.ss")
(load "simpleguicarddrawer.ss")

(define (SimpleGUITableIO table guidesc)
  (define positions (position-list (λ (x y)
                                     (and (= (posn-x x) (posn-x y))
                                          (= (posn-y x) (posn-y y))))))
  
  (define cd (SimpleGUICardDrawer guidesc))
  
  (define (Recalculate)
    (let ((poslst (table 'toPosList)))
      (define (NextPos pos x y)
        (define cardWidth (if (ObjectOfType? 'CardStack (poslst 'value pos))
                              (guidesc 'StackWidth)
                              (guidesc 'CardWidth)))
        (set! x (+ x cardWidth))
        (if (> x (- (guidesc 'TableWidth) cardWidth))
            (begin
              (set! x 0)
              (set! y (+ y (guidesc 'MaxSetEvolveHeight)))))
        (values x y))
      
      (define (iter pos x y)
        (positions 'add-after! (make-posn (+ x (guidesc 'TableX)) (+ y (guidesc 'TableY))))
        (if (poslst 'has-next? pos)
            (call-with-values (λ () (NextPos pos x y))
                              (λ (newx newy) (iter (poslst 'next pos) newx newy)))))
      (if (not (poslst 'empty?))
          (begin
            (set! positions (position-list (λ (x y)
                                             (and (= (posn-x x) (posn-x y))
                                                  (= (posn-y x) (posn-y y))))))
            (iter (poslst 'first-position) 0 0)))))
  
  (define (poscmp? func p1 p2)
    (and (func (posn-x p1) (posn-x p2))
         (func (posn-y p1) (posn-y p2))))
  (define (poscmpv? func p1 p2)
    (func (posn-y p1) (posn-y p2)))
  (define (poscmph? func p1 p2)
    (func (posn-x p1) (posn-x p2)))
  
  (define (find-container c-posn posnlst poslst)
    (define (find-x pos tbpos)
      ((draw-pixel (guidesc 'ViewPortWindow)) (pos 'value))
      (if (poscmph? >= c-posn (pos 'value)) 
          (if (poscmph? >= c-posn (make-posn (+ (posn-x (pos 'value)) (if (ObjectOfType? 'CardStack (tbpos 'value))
                                                                          (guidesc 'StackWidth)
                                                                          (guidesc 'CardWidth))) (posn-y (pos 'value))))
              (if (pos 'has-next?)
                  (find-x (pos 'next) (tbpos 'next))
                  #f)
              (list tbpos pos))
          #f))
    (define (iter pos tbpos)
      (if (poscmpv? >= c-posn (pos 'value)) 
          (if (poscmpv? >= c-posn (make-posn (posn-y (pos 'value)) (+ (posn-y (pos 'value)) (if (ObjectOfType? 'CardStack (tbpos 'value))
                                                                                                (guidesc 'StackHeight)
                                                                                                (guidesc 'MaxSetEvolveHeight)))))
              (if (pos 'has-next?)
                  (iter (pos 'next) (tbpos 'next))
                  #f)
              (find-x pos tbpos))
          #f))
    (if (or (posnlst 'empty?) (poslst 'empty?))
        #f
        (iter (posnlst 'first-position) (poslst 'first-position))))
  
  (define (GetClick c-posn)
    (let* ((poslst (table 'toPosList))
           (cont (find-container c-posn positions poslst)))
      (if cont
          (let ((tbval ((car cont) 'value)))
            (if (ObjectOfType? 'CardStack tbval)
                (OriginCardPair tbval (tbval 'top))
                (OriginCardPair tbval ((cd 'FindCardOffset (tbval 'toPosList) c-posn ((cadr cont) 'value) 'vertical) 'value))))
          #f)))
  
  (define (Draw)
    (let ((poslst (table 'toPosList)))
      (define (iter pos pospos)
        (if (ObjectOfType? 'CardStack (poslst 'value pos))
            (cd 'DrawCardStack 
                (poslst 'value pos) 
                (posn-x (positions 'value pospos))
                (posn-y (positions 'value pospos)))
            (cd 'DrawCardSet
                (poslst 'value pos) 
                (posn-x (positions 'value pospos))
                (posn-y (positions 'value pospos))
                'vertical))
        (if (poslst 'has-next? pos)
            (iter (poslst 'next pos) (positions 'next pospos))))
      (if (not (poslst 'empty?))
          (if (= (poslst 'length) (positions 'length))
              (iter (poslst 'first-position) (positions 'first-position))
              (error 'SimpleGUITableIO.Draw "positions do not appear to have been refreshed")))))
  
  (λ msg
    (if (null? msg)
        (error 'SimpleGUITableIO "object requires a message")
        (case (car msg)
          ('Recalculate (Recalculate))
          ('Draw (Draw))
          ('GetClick (GetClick (GetParam msg 0)))
          ('Implements? (Implements? (GetParam msg 0)))
          (else (error 'SimpleGUITableIO "message not understood: ~S" (car msg)))))))