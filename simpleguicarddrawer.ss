(require (lib "graphics.ss" "graphics"))
(load "global.ss")
(load "card.ss")
(load "cardset.ss")
(load "cardstack.ss")

(define (SimpleGUICardDrawer vp)
  (define mydraw-pixmap (draw-pixmap vp))
  (define (DrawCard card x y)
    (define (GetCardString)
      (if (null? card)
          "card-back.png"
          (string-append "card-"
                         (number->string (- (card 'Value) 1))
                         (case (card 'Color)
                           ('klaveren "-0")
                           ('ruiten "-1")
                           ('harten "-2")
                           ('schoppen "-3"))
                         ".png")))
    
    (define (GetPath)
      (call-with-values (λ ()
                          (split-path (find-system-path 'exec-file)))
                        (λ (base name must-be-dir?)
                          (let ((collectspath (find-system-path 'collects-dir)))
                            (if (relative-path? collectspath)
                                (path->string (simplify-path (build-path base collectspath "games" "cards" "hicolor" (GetCardString))))
                                (path->string (simplify-path (build-path collectspath "games" "cards" "hicolor" (GetCardString)))))))))
    
    (if (or (ObjectOfType? 'Card card) (null? card))
        (mydraw-pixmap (GetPath) (make-posn x y))
        (error 'SimpleGUICardDrawer.DrawCard "expects type <Card> as 1st argument, given: ~S" card)))
  
  (define (DrawCardSet set x y maxevosize evolvedirection . forcefacedown) ;forcefacedown for players
    (if (ObjectOfType? 'CardSet set)
        (let ((lst (set 'toPosList)))
          (define (BackForce x)
            (cond ((null? forcefacedown) (lst 'value x))
                  ((car forcefacedown) '())
                  ((set 'faceUp?) (lst 'value x))
                  (else '())))
          (define (CalcHorizSpace)
            (min (quotient (- maxevosize 71) (- (lst 'length) 1))
                 14))
          (define (CalcVertSpace)
            (min (quotient (- maxevosize 96) (- (lst 'length) 1))
                 20))
          (define (DrawNextCard pos x y)
            (DrawCard (BackForce pos) x y)
            (if (lst 'has-next? pos)
                (if (eq? evolvedirection 'horizontal)
                    (DrawNextCard (lst 'next pos) (+ x (CalcHorizSpace)) y)
                    (DrawNextCard (lst 'next pos) x (+ y (CalcVertSpace))))))
          (if (not (lst 'empty?))
              (DrawNextCard (lst 'first-position) x y)))
        (error 'SimpleGUICardDrawer.DrawCardSet "expects type <CardSet> as 1st argument, given: ~S" set)))
  
  (define (DrawCardStack stack x y)
    (define (DrawNextBack n x y)
      (if (not (= n 0))
          (begin
            (DrawCard '() x y)
            (DrawNextBack (- n 1) (+ x 1) (- y 1)))))
    (if (ObjectOfType? 'CardStack stack)
        (begin
          (DrawNextBack 8 x (+ y 9))
          (DrawCard (if (stack 'faceUp?)
                        (stack 'top)
                        '()) (+ x 8) (+ y 1)))
        (error 'SimpleGUICardDrawer.DrawCardStack "expects type <CardStack> as 1st argument, given: ~S" stack)))
  
  (λ msg
    (if (null? msg)
        (error 'SimpleGUICardDrawer "object requires a message")
        (case (car msg)
          ('DrawCard (DrawCard (GetParam msg 0) (GetParam msg 1) (GetParam msg 2)))
          ('DrawCardSet (apply DrawCardSet (GetParam msg 0) (GetParam msg 1) (GetParam msg 2) (GetParam msg 3) (GetParam msg 4) (cdddr (cdddr msg))))
          ('DrawCardStack (DrawCardStack (GetParam msg 0) (GetParam msg 1) (GetParam msg 2)))
          (else (error 'Player "message not understood: ~S" (car msg)))))))

;(open-graphics)
;(define a (open-viewport "Port" 800 600))
;(define d (open-pixmap "PortOffScr" 800 600))
;(define b (SimpleGUICardDrawer d))
;(define c (CardStack))
;(c 'push! (Card 'klaveren 3 (λ (x y) 0)))
;(c 'push! (Card 'klaveren 3 (λ (x y) 0)))
;(c 'push! (Card 'klaveren 3 (λ (x y) 0)))
;(c 'push! (Card 'klaveren 3 (λ (x y) 0)))
;(c 'push! (Card 'klaveren 3 (λ (x y) 0)))
;(c 'push! (Card 'klaveren 3 (λ (x y) 0)))
;(c 'push! (Card 'klaveren 3 (λ (x y) 0)))
;(b 'DrawCardStack c 50 50)
;(copy-viewport d a)
