(load "player.ss")

(define (HumanPlayer Name GRules DrawerClass)
  (define (HumanPlayer-Object . msg)
    (if (null? msg)
        (error 'HumanPlayer "object requires a message")
        (case (car msg)
          ('DisplayUpdate (DisplayUpdate))
          ('Init (Init))
          ('TableChanged (TableChanged))
          (else (apply plyr msg)))))
  
  (define plyr (Player Name GRules DrawerClass))
  (define UI (DrawerClass GRules HumanPlayer-Object))
  
  (define (Init)
    (UI 'Init))
  
  (define (DisplayUpdate)
    (UI 'DisplayUpdate))
  
  (define (TableChanged)
    (UI 'TableChanged))
  
  (define (Implements? ClassDef)
    (or (eq? ClassDef 'HumanPlayer) (plyr 'Implements? ClassDef)))
  
  HumanPlayer-Object)

(load "simpleguimanager.ss")
(load "gamerules.ss")
(define a (GameRules))
(define b (HumanPlayer 'Ruben a SimpleGUIManager))
(define c (Player 'Nick a SimpleGUIManager))
(define d (HumanPlayer 'Dries a SimpleGUIManager))
(define e (Player 'David a SimpleGUIManager))
(define f (CardStack #f))
(define g (CardSet))
(a 'InitPlayers (vector b c d e))
(b 'Init)
(c 'Init)
(d 'Init)
(e 'Init)
(f 'push! (Card 'ruiten 10 eq?))
(f 'push! (Card 'klaveren 12 eq?))
(f 'shuffle)
(g 'add! (Card 'ruiten 1 eq?))
(g 'add! (Card 'schoppen 13 eq?))
(g 'add! (Card 'ruiten 1 eq?))
(g 'add! (Card 'schoppen 13 eq?))
(g 'add! (Card 'ruiten 1 eq?))
(g 'add! (Card 'schoppen 13 eq?))
(g 'add! (Card 'ruiten 1 eq?))
(g 'add! (Card 'schoppen 13 eq?))
(g 'add! (Card 'ruiten 1 eq?))
(g 'add! (Card 'schoppen 13 eq?))
(g 'add! (Card 'ruiten 1 eq?))
(g 'add! (Card 'schoppen 13 eq?))
(g 'add! (Card 'ruiten 1 eq?))
(g 'add! (Card 'schoppen 13 eq?))
(g 'add! (Card 'ruiten 1 eq?))
(g 'add! (Card 'schoppen 13 eq?))
(g 'add! (Card 'ruiten 1 eq?))
(g 'add! (Card 'schoppen 13 eq?))
(g 'add! (Card 'ruiten 1 eq?))
(g 'add! (Card 'schoppen 13 eq?))
((a 'GetTable) 'add! f)
((a 'GetTable) 'add! g)
(b 'ReceiveCard (Card 'harten 5 eq?))
(b 'ReceiveCard (Card 'harten 6 eq?))
(c 'ReceiveCard (Card 'klaveren 5 eq?))
(c 'ReceiveCard (Card 'schoppen 6 eq?))
(c 'ReceiveCard (Card 'ruiten 5 eq?))
(c 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(d 'ReceiveCard (Card 'harten 5 eq?))
(d 'ReceiveCard (Card 'harten 6 eq?))
(e 'ReceiveCard (Card 'klaveren 5 eq?))
(e 'ReceiveCard (Card 'schoppen 6 eq?))
(e 'ReceiveCard (Card 'ruiten 5 eq?))
(e 'ReceiveCard (Card 'harten 6 eq?))
(b 'TableChanged)
(c 'TableChanged)
(d 'TableChanged)
(e 'TableChanged)
(b 'DisplayUpdate)
(c 'DisplayUpdate)
(d 'DisplayUpdate)
(e 'DisplayUpdate)
(define (UpdRec)
  (b 'DisplayUpdate)
  (c 'DisplayUpdate)
  (d 'DisplayUpdate)
  (e 'DisplayUpdate)
  (UpdRec))
(UpdRec)