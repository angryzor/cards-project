; ADT CardStack
;================================================
(load "stack.ss")
(require (lib "trace.ss"))

(define (CardStack)
  (define stck (Stack))
  ;*******************************************************
  ; function shuffle
  ; -> Shuffles the deck
  ;
  ; @params: /
  ; @return: #t
  ;*******************************************************
  (define (shuffle)
    (define (popall!)
      (if (stck 'empty?)
          '()
          (cons (stck 'pop!) (popall!))))
    (define (pushall! vec ctr)
      (if (< ctr (vector-length vec))
          (begin (stck 'push! (vector-ref vec ctr))
                 (pushall! vec (+ ctr 1)))))
    (define (knuth_shuffle vec)
      (define (knuth_shuffle_inner vec n)
        (if (< n 1)
            vec
            (let ((k (random (+ n 1))))
              (if (not (= k n))
                  (let ((tmp (vector-ref vec k)))
                    (vector-set! vec k (vector-ref vec n))
                    (vector-set! vec n tmp)))
              (knuth_shuffle_inner vec (- n 1)))))
      (knuth_shuffle_inner vec (- (vector-length vec) 1)))
    (pushall!
     (knuth_shuffle
      (list->vector
       (popall!))) 0))
  ;*****************************************************************
  ; function Implements?
  ;
  ; @params: ClassDef (symbol)
  ; @return: true if the ADT supports the functions for the 
  ;          type passed via ClassDef, false otherwise
  ;*****************************************************************
  (define (Implements? ClassDef)
    (or (eq? ClassDef 'CardStack) (stck 'Implements? ClassDef)))
  (Î» msg
    (if (null? msg)
        (stck)
        (case (car msg)
          ('shuffle (shuffle))
          ('Implements? (Implements? (GetParam msg 0)))
          (else (apply stck msg))))))

