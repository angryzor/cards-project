(define (double-linked-position-list ==? . lst) ;lst is used if creating from scheme list
  (define-macro DLPL-No-Next '())
  (define-macro DLPL-No-Prev '())
  
  (define (double-linked-position prev next val)
    (define (has-prev?)
      (null? prev))
    (define (has-next?)
      (null? next))
    (define (prev)
      (if (has-prev?)
          prev
          (error 'double-linked-position "prev requested, but this position has no previous")))
    (define (next)
      (if (has-next?)
          next
          (error 'double-linked-position "next requested, but this position has no next")))
    (define (value)
      val)
    (define (prev! x)
      (set! prev x))
    (define (next! x)
      (set! next x))
    (define (value! x)
      (set! val x))
    (Î» msg
      (if (null? msg)
          (val)
          (case (car msg)
            ('has-prev? (has-prev?))
            ('has-next? (has-next?))
            ('prev (prev))
            ('next (next))
            ('value (value))
            ('prev! (prev! (GetParam msg 0)))
            ('next! (next! (GetParam msg 0)))
            ('value! (value! (GetParam msg 0)))
            (else (error 'double-linked-position "message not understood: ~S" (car msg)))))))
  
  (define first '())
  (define last '())
  (define size 0)
  
  (define (from-scheme-list lst)
    (if (not (null? lst))
        (begin ())))
  (define (length)
    size)
  (define (full?)
    #f)
  (define (empty?)
    (= (length) 0))
  (define (map func new==?)
    (define (iter thispos)
      (
    (if (not (null? first))
        (iter 